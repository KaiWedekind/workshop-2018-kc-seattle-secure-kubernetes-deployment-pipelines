---
# Source: harbor/templates/adminserver/adminserver-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  HARBOR_ADMIN_PASSWORD: "a3ViZWNvbjEyMzQ="
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="

  CLAIR_DB_PASSWORD: "Y2hhbmdlaXQ="


---
# Source: harbor/templates/core/core-secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "WW16Wm1Ta2F5WFVCUTRIcw=="
  tokenServiceRootCertBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2ekNDQWRPZ0F3SUJBZ0lRVjBiUDl2Tmp2ellHWDJkeEp6M3NaekFOQmdrcWhraUc5dzBCQVFzRkFEQVIKTVE4d0RRWURWUVFERXdab1lYSmliM0l3SGhjTk1UZ3hNVE13TVRZek5UQTJXaGNOTVRreE1UTXdNVFl6TlRBMgpXakFSTVE4d0RRWURWUVFERXdab1lYSmliM0l3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLCkFvSUJBUUM5bmVtTmx6cW5NaVZwaUlzbzVzM1dOWkNBWlhjbUFyeVR3LzRXTWJSdDREc2VBb2ZTU3NLM3plYVMKSCtoa1V1OEsrSjN1MXdhVXNsWE9MTDRWRFh5bFZQaVozUHFxeHNjVlA5akFTc052b3R5Y1FTMkc0bXIraGVJUgpxK28xdzh0bDBjM0tXc0xabmJCZkZHc2FlaGh6OVpOVTZ2Z0p4YzNibVMzMzg1Z290RE0zOThkZ1hiNmpZQkZjCnpEeU9XNUlJa1Y2WFJOR0ExcCtXM09iQnovcXhiMHpwVDRidk1md0lIci9ab1Y1SVhqMmU0RlhuSUUwZ2EvcmgKYlloaXkxazZTeW96WWZpemoyclNzT3hlSVFaT1JvS3NPdWZCZVI3amJzSVd1M3dNWTJZbjYzN2VmdXFaY2VXTQpKMk5kcXRoTGhpL29aM1JkWWJkZWZVNDlRVTR0QWdNQkFBR2pQekE5TUE0R0ExVWREd0VCL3dRRUF3SUZvREFkCkJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBTkJna3EKaGtpRzl3MEJBUXNGQUFPQ0FRRUFDcW10c3dCdDJLL0NwNDUxcHU4NEl1aWl6ckgvWWhwSjRGc1YyWEwzSHNnNApRckZuODhEbDg0ZW1BbElnSjJ1OVg0TGp3WC9aTzRBMWs4WWtlQTNJRytOaWRidDBxM0lhNGNYV0NLWEZhZjRBCnhUalorNXlHNTlSdFFnZ1VEK3owVnFtYjV0VWpnRWh1RzljbVRKYUdicVY0V2pvRXBVdGVXc0RIYktrcDVxUHkKMlJCaGxaSFhrK002YzBFNDRhd1ExZjc0dmhMY3ErQk56cGM4R1NjaktVQUE2eFNBK1ZRb2ZWc2ZaTDlUM1dSRgpNa2ZzMTRxeUlEV1Nkc1dvanN0U20xcDVtSTEzcVZPWW15anNxS2FNL0tGWks4TUlIMXZ5cHdFd29jbVM4QUlqCkd6ME82bUxBSmtCcDRJYkJ5b1FMUzZOQ2RvV2hFTXN2ejhaWDgrbU82Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  tokenServicePrivateKey: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdlozcGpaYzZweklsYVlpTEtPYk4xaldRZ0dWM0pnSzhrOFArRmpHMGJlQTdIZ0tICjBrckN0ODNta2gvb1pGTHZDdmlkN3RjR2xMSlZ6aXkrRlExOHBWVDRtZHo2cXNiSEZUL1l3RXJEYjZMY25FRXQKaHVKcS9vWGlFYXZxTmNQTFpkSE55bHJDMloyd1h4UnJHbm9ZYy9XVFZPcjRDY1hOMjVrdDkvT1lLTFF6Ti9mSApZRjIrbzJBUlhNdzhqbHVTQ0pGZWwwVFJnTmFmbHR6bXdjLzZzVzlNNlUrRzd6SDhDQjYvMmFGZVNGNDludUJWCjV5Qk5JR3Y2NFcySVlzdFpPa3NxTTJINHM0OXEwckRzWGlFR1RrYUNyRHJud1hrZTQyN0NGcnQ4REdObUordCsKM243cW1YSGxqQ2RqWGFyWVM0WXY2R2QwWFdHM1huMU9QVUZPTFFJREFRQUJBb0lCQUh6YlNIalZoZWVtVzRBOApTdlhwMU13aWhUNG1rZWhUa1B6ejU1R1J0UzlNb1dESFpjd1JNbHA1bUVQTUF1aGN1ODdMbXFNMHI3Nm1GMTRsCmxCeWt2dGpYTk1PTUFQc0czUHlmQ0FqR3NoNEdiYUh1UVI0NlpSMm41dzZmMXg4RUNDREpuK3FKRFJqaWZzcDgKMVhHZnlBNURQSHFFSmtPNUhpNWxsU0ZhSTIxWTU4MEF1dGduVURMQnhZTjdoUEwwSU1ydXNOamlyWENOdWFkegpGUlJXK2VKbmtPRnJNNVhiQzBNa2czTS9XYWNMQUpVdzVDb3lyNklhaHZNZzVibk5iK3A0bkhFR0YzaFJoSW9uCnp0QTl2NEFvOFFNc1dKV3VSTE9ieDg4RnFldGhyQ1pqR29OUWk5bEMzbnBJSFBId0pCNkJnSDVVd0Q3VVBSbkUKWHNpNnBqa0NnWUVBeWgzWCszblhuVlhGZzk5MTNyRFFibThmMXlidk84YVZsVlFuZWYwbHdxaDVlelY4bWpsVQpEQ0pseDZ5K1dZNTV3YjVGZWxyVkZZeVc5NnlLd1QrOSszUEZLZVFNZmN5cUthZFV6MFFDa2trYTJZNThaY3U4CnpIWkZRWUI2VTFsdFNYMVM4b1U0UHJEanVwd2pKb01mT1JrMkhRR3p6eDNydUxMc09rSzA3bmNDZ1lFQThDcjcKQVhDTjcxRlJScW05Y1ZnVjNERlAyK1NKdENFQlpkTGVvNUxlalVMaXl2SVpvWXJwN09zVEl0RlY3cm9nUEZSOQpDOFZNTU9TZzFwQUVreUYzbzErRFNtcnFhWHVCRTk5cHhwd1JQTm5UczhVU28rRmI5OTJUUkFtbTBmYW1rME53ClNXVWNTK244bDQvYy9weS9xOGZxRWFVQUxneERSa2pBSkNTNjNYc0NnWUJCRzBIeXNQb0NwWmw5ZEdNc3UvbzQKU0xXU0FlbTRjS3pJc0pZUzFyZnVMNFVLYWwxYjlMR2RRd3RVT2RJTFdUamhieUJFWExRZFArOTFrdkFUZGl3RgpydkpKSHp2aTNpWEdTeStub0huUGs1c0JqOE9FcXcrRE1XbjN3cUlrN1Q2bUdLZTZsYTFiakhHZk1DS21pa0JwCmpUU0FQWWNsWmJjRUJTYlJVYUdrMndLQmdRQ1lIa0VaNmxhY0xGOVVhSktyUmVXaXNFRXF3QmhRVlU5elZScmIKZEYwdUVCMWgrZkl1RmJTUThWd1BnNVB3UDBmSHJxUDlYcHdobzg0VDJPaHM0SmZNak9TMXIvNkZqVXAyY2QybgpoSmFPZWxIUzNaSXU1c0Mvd0VKVXArQlh3T2hGQWtRTzJOSVJhMFVvSW1FUmkrc0RQUDZPNm5td3NPZXpqc1RVCm44Y1VIUUtCZ1FDM2xjL0pieWFmZlhjSnBib2RUTkh5dDlBbzRqQlgvNmkxdCtNUFZJRHNTbGhwbkNQd0Via2gKMTRBVDVvbVAyRWFXUGdxVGUzcXF2SFRkeHNoaUFwQzFldkN6by9uMSttWDFrUHZGSi8vZjkza3I3cHBWSHdKaQpoYWJBQTI5eFk0QWtKSDRKaW5lV2doeTVqZjZocXVlTFNGdExZSG5NTzZ4bFRTTlh0cDNzMkE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
  
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secret: "SVlDdUl5OUtJVG50UE84bQ=="
---
# Source: harbor/templates/nginx/secret.yaml

apiVersion: v1
kind: Secret
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURCekNDQWUrZ0F3SUJBZ0lRYWoxT2FDTjlHSGJncmJQSktSc05KREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NVGd4TVRNd01UWXpOVEEyV2hjTk1Ua3hNVE13TVRZegpOVEEyV2pBWk1SY3dGUVlEVlFRREV3NHhPVEl1TVRZNExqazVMakV3TURDQ0FTSXdEUVlKS29aSWh2Y05BUUVCCkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU11V09vVUxQNGFmeHU5b1VEZGNoZTIrUVVPR3JuVjBIUE5BVW9kSjVjeFQKdTZkd3Yrc3pVbTUrZHRaaTJiSFVKS2JEemdxUG9BdDg2b2ZocHBINUZKc1c2QkFuWXFyQzhJWTZlQURBQ0cveAo0ZkdFZU1qNFpMQ211ZE9hME1XU0c0ZkZubjBsb0NnR2Z2dlVuTGowQU9hT1NSNE9IcldVcEk3QVBIVXRubTNVCjYrS1hFblRjYU9FUTlIaWhsdG5hMEpPeTB3QjlxWjlJRzBTWGhJTzBDZjZ0OXNFQkVnYlJrSWlXbGR5eCtKWmMKb0hyOGthNGI1eU9uRkFERDFuZysxWCt6RTV4N2p3ZUVSbkhGRGdaNjhhNDdNVEVBeEJyVGhTK0RTblZibnRmdwpuN21neGwyUHgzN0JyUmd3NmI0TXJMZ3ZDZFdhWWZEclgyY2w0RU9xeWRNQ0F3RUFBYU5RTUU0d0RnWURWUjBQCkFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUIKQWY4RUFqQUFNQThHQTFVZEVRUUlNQWFIQk1Db1kyUXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBQ3JGWUpQUAp4ZjRaeWxuaTBDM1FmdWVwc2V1ZlJld1JhUWV3N0VHc2RzbVlzNXAzOVZsNVZPV1FZWHB3ZHRoSFNDejYvRTV4Ckk3TzBWdW9ta3RUMzFScnRQOEZxVlJidk0xc29hNmViejlJVHRxeDBqeU5vS042OW50bzlsWlhWSzMxMENpUWgKRzY5KzhVY1o5Ly9RMVhCcWFQY1p3dGFEalB0ZXV4d3VoQXc5dmpnOXUzWE1POElwb0lNRWpzOVBKY01mME1LNQpvcFNGSmIxVFRKSnFMSnJpRkF1YVNQRUxDaXRhdDZEUWg2S0lER3UxZTZURUV6QU1aZ1Q4NCtjdmlxTjY2MndzCjRuVlNwVk0vVXYxWFVRQ1p6Um8xMGJ5Uko5dERtKzAvaEJOQUlQM2xjb3BpOXFwR0U1Z0pFVEhZNDhjS2M2WG0KdXFFdUJOSGRncWZFdy9jPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeTVZNmhRcy9ocC9HNzJoUU4xeUY3YjVCUTRhdWRYUWM4MEJTaDBubHpGTzdwM0MvCjZ6TlNibjUyMW1MWnNkUWtwc1BPQ28rZ0MzenFoK0dta2ZrVW14Ym9FQ2RpcXNMd2hqcDRBTUFJYi9IaDhZUjQKeVBoa3NLYTUwNXJReFpJYmg4V2VmU1dnS0FaKys5U2N1UFFBNW81SkhnNGV0WlNranNBOGRTMmViZFRyNHBjUwpkTnhvNFJEMGVLR1cyZHJRazdMVEFIMnBuMGdiUkplRWc3UUovcTMyd1FFU0J0R1FpSmFWM0xINGxseWdldnlSCnJodm5JNmNVQU1QV2VEN1ZmN01Ubkh1UEI0UkdjY1VPQm5yeHJqc3hNUURFR3RPRkw0TktkVnVlMS9DZnVhREcKWFkvSGZzR3RHRERwdmd5c3VDOEoxWnBoOE90Zlp5WGdRNnJKMHdJREFRQUJBb0lCQVFEREJPNmI0ZEdCcVc2TQppWFZHQXdoOFhHTHlSNEs1R25oZEFFSE9QUmkzYVlKNS9BU3NUcVpwR0JYSWVqcWxJVjNXcmZ5aW0wQ3BvSWlkCmo2ZmJieW14QXZsYitBNkpHMklDZ3VIUGZpVFc3M01MdzJWY3hxelZsM0NzNWtHVThNZ1VnRmE0OVNEOUZuUHYKMHBRcWkvcU00TUhqMjR6SlRsRndPVy93bzdsKzVON3pxY2h4U2hCRER2dUZDb1hEalM1enZqRnF2eVUvQk1iVwo5ZzlOa3Q4NXlMTURQMlZ0UXRCdUwvVzFuKzIwaEZRVHUrRDJOdXV5akllM1p3Q3NDem5nc2lxSFY5dnpjK2J5ClIwNzZ0Y285Ryt4RkxaRGM4UVdnTDJYNEM0TkpZR1pkbnpkSTcyTHgzUTlVZDUydWpGdEd5clVjSzA2dDJNMmcKeXZYSklFeGhBb0dCQU15K1ZYaGF0WnBkMzdUSS93bXIzcHVKRS9TYmNYRFIvalB6NjZ6ZThhS1M2Y05yTkh3MwpWc3pDd0dVSzJzOUdweGFSa1lSeWQ3K0tKRW9ZWjBFazJ0L1dYSHplbFpQbHBuczQ2N21IckZ6YjFmODB0aXVwCjZkb2FGU2luU3VOVzRWaVFXSk9CZFVPV3pET1l5cUZIRkdndGdxdnRIL0ZZU0J6UkVoU0o5RWFSQW9HQkFQNk4KeENrTWpOR1ZJamxMeTBUaVVtZFZVS1hVODlJRUsvSFAvQXdtbXBmZytwbGk1VGRuR0ZvNktJZXRyeUx1anovMgoreW1LYUk3Y0dyNGRiVnJmMmNCTXZFRnJnMWVLdzZRc0h3Q1MvMEFESXZRMy9iSTdKc3poTUgvbDlwNzJ6cTIyCnM2UU9BazFDTGh3K2xFQmZxMHE1R0ZLa1JHdi8rOE0rRENyL3JPUWpBb0dBV000dHNGaFg4SzdLKzFVN0dlek0KVDFZenE2TklueERXVzU1dkdMcFN3SnRNZlpDZ1lVaDNnN1R0VW1aVTVoYlZIbnJoVFR1QktUazM2Rk9SWmJZZwpvWG9PLzdKajJwUi9rMjdxLzd3VFRPdWxkRjVlcmEyeld3QjVNUHJ2QnBDR2lhMkNYZWlHL2x3SUVsRXhncWFiCitWdlVFOUowU25CcVJ1V0FIQnlDTWFFQ2dZQkpYQVBITExXOGhMVXJPL3VscTIvQ0ZlVTdGV2I3QkhiQnBvWGwKM280NDdQNXJqQU93OXNZZTRwbmhtQjFiL05KTnhkaldQT3dyRjZXaFdvdTBYOFM2VmFML1c0T3JpL01iOGhjeApMQ3ZoZjhYb0NlYlVJWlhwLzQvaG5CMTU3SGpkdVVTR0ovOWowb25GWEFlUGtjS2tzemtlUC9iMEJQN0NZclJSCkJBUUlid0tCZ0ZPd2xoNGhJbXVtVlIwdWpPRS9xdEpzYkw1V09lQ21RaWlnVCtEK2lSdjkvZFhyR1dWMFYyQ1QKSTloSnRMZVdkV0RsZXU2T1JKR1JRaXZBMHpUUFMvUHBKa1JyWncya0dtNTk1RlkvNjBNR0F5U2FUdGhiUHMzTQpOaE00N0EvWk5hUmZUdzZYNkIxUVZiY3gyak0yV2pNcGtEMnY2RDZxczBvaXdscHUrZ2c4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  ca.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5RENDQWR5Z0F3SUJBZ0lRSnJpUFRUSmo4eHluaFpkNml4U2FIakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsb1lYSmliM0l0WTJFd0hoY05NVGd4TVRNd01UWXpOVEExV2hjTk1Ua3hNVE13TVRZegpOVEExV2pBVU1SSXdFQVlEVlFRREV3bG9ZWEppYjNJdFkyRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGtESnNnYW1pcHJNbDRyUDZZMHVKNkRDNlJwMmdTN2FrWWRUbkpERW95b0N1ZWR2WkgKMkc0SFFWa2xIa1FHeWdnejRqSnMvWkg4RXIrMTczVEVaOFhwUStrOWg1MFV5Zkh1a0FjM2lJQUpBeFNEZXRHTwptN2Y1K1VFR0I1dDhrSGQwdWNZOEtrMi8vaVdybEdBS0hreU81WlBidS9RRXFxMHRWNnlOQnRvL3VCTXZnaWpxCm9ETUs0Y1JqSlB0VzhQMDNJT3JxbzhRekg3MGVIVTROU2xOSk9nMzRqck1sOHV1SUV6cUhuRDJDL084TlBGaHAKbEpHb2o1NklpMW9RT1BqSzlkMkxuSVVmRzd3QVhJTjJqU2dMd3VmM3BpK1JDS0loMjFJZUhTYzN2Q1Z3RmtVMQp4RW03YVVsZDBKYjhKaFhmQlJIKytXSHZ2ZTRRQUliNFZnZDFBZ01CQUFHalFqQkFNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFpK1gxaDNybHUwaDFGeTd0aGU5WXZMZW9MYnZQS0swNwplVG9FZzJUNmFtc3ZyN0Jvb2l4VTBiOHZMS2xPQWNTSWpJK3pNUWhxYnRpcFI1bG8rMHN5L3J0OVlzUU5wbHNtCmd2RWJ6dGU0bzB2UXlCN2hBN3lMOUNHSWRvVTkxZWtIa1dDNHNoa254SHJHNlRITThENmpTRkVnWVh6OSt4cDAKdnROS0RwL3FpQUlVb0VncU56ZU9uSVZvcVBnWFFmb08rNjc3cmJhMk9CaEtoZGQ4bzIwZ204SUlrUjZnOWxJMQpHUjNTUEd3ZFNYM0w4Tm9maDBEVmRFNm9wdDY0QzNFcmZtbFhCTURDMFpQM2gzbjFQU2F6dTQzZHZhbjdoc1NtCjhCTjRiMmhVYTBSSmZxVGZXYjRNeWhlWit4S3l5c3FCUTNLQ0FQVmlEWldRZHdybjBPaUkydz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "U2gySGNkT0F6V1JrUDB6bw=="
---
# Source: harbor/templates/adminserver/adminserver-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
data:
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  EXT_ENDPOINT: "https://192.168.99.100:30003"
  CORE_URL: "http://harbor-harbor-core"
  JOBSERVICE_URL: "http://harbor-harbor-jobservice"
  REGISTRY_URL: "http://harbor-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-harbor-core/service/token"
  WITH_NOTARY: "true"
  NOTARY_URL: "http://harbor-harbor-notary-server:4443"
  LOG_LEVEL: "debug"
  IMAGE_STORE_PATH: "/" # This is a temporary hack.
  CFG_EXPIRATION: "5"
  ADMIRAL_URL: "NA"
  RESET: "false"
  WITH_CLAIR: "true"
  CLAIR_DB_HOST: "harbor-harbor-database"
  CLAIR_DB_PORT: "5432"
  CLAIR_DB_USERNAME: "postgres"
  CLAIR_DB: "postgres"
  CLAIR_URL: "http://harbor-harbor-clair:6060"
  CLAIR_DB_SSLMODE: "disable"
  UAA_ENDPOINT: ""
  UAA_CLIENTID: ""
  UAA_CLIENTSECRET: ""
  UAA_VERIFY_CERT: "True"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  WITH_CHARTMUSEUM: "false"
  CHART_REPOSITORY_URL: "http://harbor-harbor-chartmuseum"
  # The following properties have no default value in Harbor core if not 
  # set via env. They should be removed after the refactoring:
  # AUTH_MODE, SELF_REGISTRATION, PROJECT_CREATION_RESTRICTION 
  AUTH_MODE: "db_auth"	
  SELF_REGISTRATION: "on"
  PROJECT_CREATION_RESTRICTION: "everyone"
  TOKEN_EXPIRATION: "30"
  EMAIL_HOST: "smtp.mydomain.com"
  EMAIL_FROM: "admin <sample_admin@mydomain.com>"
  EMAIL_PORT: "25"
---
# Source: harbor/templates/clair/clair-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
data:
  config.yaml: |
    clair:
      database:
        type: pgsql
        options:
          source: "postgres://postgres:changeit@harbor-harbor-database:5432/postgres?sslmode=disable"
          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

      api:
        # API server port
        port: 6060
        healthport: 6061

        # Deadline before an API request will respond with a 503
        timeout: 300s
      updater:
        interval: 12h

      notifier:
        attempts: 3
        renotifyinterval: 2h
        http:
          endpoint: "http://harbor-harbor-core/service/notifications/clair"


---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080

---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "harbor-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
    job_loggers:
      - name: "FILE"
        level: DEBUG
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: DEBUG
    admin_server: "http://harbor-harbor-adminserver"

---
# Source: harbor/templates/nginx/configmap-https.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;

    events {
      worker_connections 1024;
      use epoll;
      multi_accept on;
    }

    http {
      tcp_nodelay on;

      # this is necessary for us to be able to disable request buffering in all cases
      proxy_http_version 1.1;

      upstream core {
        server harbor-harbor-core;
      }

      upstream portal {
        server harbor-harbor-portal;
      }
      upstream notary-server {
        server harbor-harbor-notary-server:4443;
      }
      
      log_format timed_combined 'remote_addr - '
        '"$request" $status $body_bytes_sent '
        '"$http_referer" "$http_user_agent" '
        '$request_time $upstream_response_time $pipe';

      access_log /dev/stdout timed_combined;
      server {
        listen 4443 ssl;
        server_tokens off;
        # ssl
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # recommendations from https://raymii.org/s/tutorials/strong_ssl_security_on_nginx.html
        ssl_protocols tlsv1.1 tlsv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:ssl:10m;
      
        # disable any limits to avoid http 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid http 411: see issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
          proxy_pass http://notary-server/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      }

      server {
        listen 443 ssl;
    #    server_name harbordomain.com;
        server_tokens off;
        # SSL
        ssl_certificate /etc/nginx/cert/tls.crt;
        ssl_certificate_key /etc/nginx/cert/tls.key;
      
        # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_ciphers '!aNULL:kECDH+AESGCM:ECDH+AESGCM:RSA+AESGCM:kECDH+AES:ECDH+AES:RSA+AES:';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
      
        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;
      
        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location / {
          proxy_pass http://portal/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          # Add Secure flag when serving HTTPS
          proxy_cookie_path / "/; secure";

          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /api/ {
          proxy_pass http://core/api/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /c/ {
          proxy_pass http://core/c/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /v1/ {
          return 404;
        }

        location /v2/ {
          proxy_pass http://core/v2/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_buffering off;
          proxy_request_buffering off;
        }

        location /service/ {
          proxy_pass http://core/service/;
          proxy_set_header Host $http_host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          
          # When setting up Harbor behind other proxy, such as an Nginx instance, remove the below line if the proxy already has similar settings.
          proxy_set_header X-Forwarded-Proto $scheme;

          proxy_buffering off;
          proxy_request_buffering off;
        }
      
      location /service/notifications {
          return 404;
        }
      }
        server {
          listen 80;
          #server_name harbordomain.com;
          return 301 https://$host$request_uri;
      } 
    }
    
---
# Source: harbor/templates/notary/notary-cm.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary
data:
  
  
  notary-signer-ca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDAzCCAeugAwIBAgIRAOuso27RjpDWaNh3Nzhi/RowDQYJKoZIhvcNAQELBQAw
    GzEZMBcGA1UEAxMQaGFyYm9yLW5vdGFyeS1jYTAeFw0xODExMzAxNjM1MDVaFw0x
    OTExMzAxNjM1MDVaMBsxGTAXBgNVBAMTEGhhcmJvci1ub3RhcnktY2EwggEiMA0G
    CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDNCzSCgZ+P+GCGMl7V85+n+dgYbHnj
    LcGht+TYIRViaQkoD5mtsALR4vV0jU2QHjeNNzYcm+9HDpvilWKWVg6e6MMDm6h3
    ZdfW580iwaJD6ydQfyOyRbYcMfGY4g+2CsmPhONZvvMsbqRCeax0ZpNY+TC5PFzL
    CcWAumUtKQjwxoQpxyUy5yzctA9rT2kDIyj2l/zDqb3bxJJx+rikHmXLToJHriqC
    Zdl8R+b22F0JYXzQ+/DOq+fc+fmkvWPC0Abu1lNTzVUve3iHg978DHOILgQCB3GE
    EJkUHlzUPYoSoqVYxsF2s2mHbSt4vL6peXJIbg8UyjXN8L7yNC/eUpQzAgMBAAGj
    QjBAMA4GA1UdDwEB/wQEAwICpDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH
    AwIwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAEuZfCdbqr3wz
    e0yLzEWpP6Qo+JKGciC/5FIOs8xs8Qls9eAy+siA/DDFToVHOpo+mEhm7ucV7kvy
    ZKgueWkheSDARBYqKmwzfreAyQG3pvAJ4S5XrGUeUeixNtBvU05cmDKGGy5NbQHA
    lXmGzurqAlFca61ELJaKIYNCmajGGmH73BedwPRZ2wrU1SpGkRRD56XrdBC8l5np
    0uGhiqqIseT1xWyH1tOVYlBzzNDBnPcoYeNWhaIf/dTKSfCluJRy3NgaviyxbGEU
    7Xise53K11S/gCrxGoikexltN2s3yZ3BoFlFCcPeQPv3P2n44d7Y72MmgVXZ12P1
    aTOae8QZLQ==
    -----END CERTIFICATE-----
    
  notary-signer.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDCjCCAfKgAwIBAgIQP8voB/q+uVz+6HhtoVEnGjANBgkqhkiG9w0BAQsFADAb
    MRkwFwYDVQQDExBoYXJib3Itbm90YXJ5LWNhMB4XDTE4MTEzMDE2MzUwNVoXDTE5
    MTEzMDE2MzUwNVowJjEkMCIGA1UEAxMbaGFyYm9yLWhhcmJvci1ub3Rhcnktc2ln
    bmVyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAoZgX9FqGGPAw6BWF
    4NClDCO4bbHVDzxZRWsC6pe5e2ADELervqRc4+DJhKgoQ8DfYy1t+P4mBGqgCMTV
    VAJVzIcnPCFQzh+8E45lEPEz/dzm193lCWCxUQjj7ZPiKcoFL78Bu5Qlfjx1Xgtp
    YaPkFytpCzFJTIKV9/vx/599sRgzgRgICsQ8h/uQlnCLLvyS96KFLlBi0E3uxOSp
    KIyYZhJjHeuddBG22nFzvUGKKknqj5Q6q2N27gi8P8FFh6sR7/QX4SrBrRzVCdtP
    rCaru+GvxdQEZRvrUGIk4oIiaucWrdq1X0cXppfoaN8USkwtVrD98Ln11Orl5wnX
    m5P+ewIDAQABoz8wPTAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUH
    AwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBAI2b
    jLwQpMkwiHnRtGC3/4ghKqEEO2dWdnzPb4HHJkWZIiE2XI3Uk3MSDV/at+HOUmTU
    JS8iaHx5BUW5/MwGnFTZWAtl/o1IoSFJhpDNW8IZkSvD/cghfO9nmYQYeMbkWAoX
    CV+evzlfBGNMZCPmCk0rCQZoPjQak8LHCmZLjcLXJdamZx0xXzk2kJ5Iq0Ee1YNr
    YYQT7ryw2Nbqav5rMt6SZubBV0d+joOkDGQQuiNKItCHB4t4F2UNrEXlysWU2B52
    rhGPLBGinarm+1VKqFO8CIcqCBj4SbwIqAcvHVBAfmGhbmwT3hkZq76qXLWWL1x2
    fjDEt+Sa3m/JOdAI3vU=
    -----END CERTIFICATE-----
    
  notary-signer.key: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEogIBAAKCAQEAoZgX9FqGGPAw6BWF4NClDCO4bbHVDzxZRWsC6pe5e2ADELer
    vqRc4+DJhKgoQ8DfYy1t+P4mBGqgCMTVVAJVzIcnPCFQzh+8E45lEPEz/dzm193l
    CWCxUQjj7ZPiKcoFL78Bu5Qlfjx1XgtpYaPkFytpCzFJTIKV9/vx/599sRgzgRgI
    CsQ8h/uQlnCLLvyS96KFLlBi0E3uxOSpKIyYZhJjHeuddBG22nFzvUGKKknqj5Q6
    q2N27gi8P8FFh6sR7/QX4SrBrRzVCdtPrCaru+GvxdQEZRvrUGIk4oIiaucWrdq1
    X0cXppfoaN8USkwtVrD98Ln11Orl5wnXm5P+ewIDAQABAoIBABlGnACZpD4EW/IB
    Y9Z9bEOQ1sk5trTSYLhN+7/MCbQ1mWUlBZUlSm5Oe9bnIp0ubwKpWXlH75RjRTL5
    7tBcKSV7wnRSVbxYFGgOrtpOkC5WPjlnuOqVmEavmE9SAV89/T+xpci8bHzpYgZa
    zJn8M7I4FQ8uH2P7TQ/j9b9hKBzqB4WZGg5fi96N9mQEDqFH8H6bK/TylAYy5/AV
    iW5JjvGiaM7HEFjcGdNUPkE8LH7T+8uyPQ3skN2hWz+aLg4uTYhHIQN73yuOlmm7
    jnYpW+tZ+JY5dqGw1qV+2OCH9lYBhTQZ1i15v9lv0tcbZnveB9+XPhdTD8Igx84H
    Zh6taNkCgYEA0PfYmMeFPVDmh0PZkYZu8F4U8y8cT836i6wjqkRAP8ZFQA2CKK4/
    Vi4wwEQFjDNdZvpvt+yC7dapbLGxdjnZc/hLOXz3pYOmX9Q4a8hn/Wac+CbxM0HL
    2THmz0MbDxhFANSKMcCkA5YlG1k14p1lNSvv70rJVyZtLfD2DPKiYgcCgYEAxfaw
    i/hPv3TFJgrUpJD9RVYb2ndPntCBiLtEd3ESgKbCj/FGCoOII+cDTWvWiGQLcK+W
    no/Jg/eGpYN8xrqq/aAJiFfw0Jt/DKOLQr6qBrIFgv9OYUd8tuI78XiF/t7ccUKZ
    tBwapE39ke0qvXfyPSCctEf2SWS7WqQpA98fUu0CgYAlR9JQj2fp5ID8KNKr77vj
    DiXWrNT0N983A+LpAXwk5I5+Ouq5rzyFd4AjDP+gX5mOQaekvIEvRVi8l4b9fJya
    3/UrsGvOD4qjFg1qzTogLypZ6zik2Fwxx4FSALrXGpFU8JYnAiNAsIy2MFg4sbPY
    pJoNqt34ulZIF/ENpkvqCQKBgFVza7evgrTw8Zy/NhSnJTxFtBY0RCEYfaGIvEAW
    hdcUpI0/p20oY56jvDAyKVOMY8fLc2eUR3b4ZJ2TSUv7DY4XA6Zf12okhM3u1lEE
    Ph5Pv8NQ8wNYuUO0Gg3caXKfvmYBSpmNPA7KP3c6+aT5Xo32Qs4q9euuWJUCoVWz
    fTDtAoGATEEhvGsOBOzj3fAAe/2wECxMcWh4wXSo83NKH+coPgNWSR0wz+0S7p/v
    CZLhy7lQIsNVUo/kSarXvKIP7tGqIdgFk+y44ai8tqhNyvKB0s1B6ZvtveR3JMdH
    y4Bqwuheze34KH/lc8/QerHLh6Fj1Vwc3W/ixEZJJG9TSYe0Mvo=
    -----END RSA PRIVATE KEY-----
    
  server-config.postgres.json: |
    {
      "server": {
        "http_addr": ":4443"
      },
      "trust_service": {
        "type": "remote",
        "hostname": "harbor-harbor-notary-signer",
        "port": "7899",
        "tls_ca_file": "./notary-signer-ca.crt",
        "key_algorithm": "ecdsa"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable"
      },
      "auth": {
          "type": "token",
          "options": {
              "realm": "https://192.168.99.100:30003/service/token",
              "service": "harbor-notary",
              "issuer": "harbor-token-issuer",
              "rootcertbundle": "/root.crt"
          }
      }
    }
  signer-config.postgres.json: |
    {
      "server": {
        "grpc_addr": ":7899",
        "tls_cert_file": "./notary-signer.crt",
        "tls_key_file": "./notary-signer.key"
      },
      "logging": {
        "level": "debug"
      },
      "storage": {
        "backend": "postgres",
        "db_url": "postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable",
        "default_alias": "defaultalias"
      }
    }


---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: debug
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: false
      delete:
        enabled: true
    redis:
      addr: "harbor-harbor-redis:6379"
      password: 
      db: 2
    http:
      addr: :5000
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      token:
        issuer: harbor-token-issuer
        realm: "https://192.168.99.100:30003/service/token"
        rootcertbundle: /etc/registry/root.crt
        service: harbor-registry
    notifications:
      endpoints:
        - name: harbor
          disabled: false
          url: http://harbor-harbor-core/service/notifications
          timeout: 3000ms
          threshold: 5
          backoff: 1s
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: debug

---
# Source: harbor/templates/adminserver/adminserver-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-adminserver"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: adminserver
---
# Source: harbor/templates/clair/clair-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-clair"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6060
  selector:
    release: harbor
    app: "harbor"
    component: clair


---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core

---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
# Source: harbor/templates/nginx/service.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  type: NodePort
  ports:
    - name: http
      port: 80
      targetPort: 80
      nodePort: 30002
    - name: https
      port: 443
      targetPort: 443
      nodePort: 30003
    - name: notary
      port: 4443
      targetPort: 4443
      nodePort: 30004
  selector:
    release: harbor
    app: "harbor"
    component: nginx
---
# Source: harbor/templates/notary/notary-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 4443
  selector:
    release: harbor
    app: "harbor"
    component: notary-server

---
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
  - port: 7899
  selector:
    release: harbor
    app: "harbor"
    component: notary-signer

---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    release: harbor
    app: "harbor"
    component: portal

---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: registry
      port: 5000
    - name: controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/adminserver/adminserver-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-adminserver"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: adminserver
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: adminserver
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: adminserver
    spec:
      containers:
      - name: adminserver
        image: "goharbor/harbor-adminserver:dev"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
        - configMapRef:
            name: "harbor-harbor-adminserver"
        - secretRef:
            name: "harbor-harbor-adminserver"
        env:
          - name: PORT
            value: "8080"
          - name: JSON_CFG_STORE_PATH
            value: /etc/adminserver/config/config.json
          - name: KEY_PATH
            value: /etc/adminserver/key
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: adminserver-key
          mountPath: /etc/adminserver/key
          subPath: key
      volumes:
      - name: adminserver-key
        secret:
          secretName: "harbor-harbor-adminserver"
          items:
          - key: secretKey
            path: key
---
# Source: harbor/templates/clair/clair-dpl.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-clair
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: clair
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: clair
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: clair
    spec:
      containers:
      - name: clair
        image: goharbor/clair-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 6061
          initialDelaySeconds: 30
          periodSeconds: 10
        args: ["-log-level", "debug"]
        env:
        - name: NO_PROXY
          value: "harbor-harbor-registry,harbor-harbor-core"
        resources:
          null
          
        ports:
        - containerPort: 6060
        volumeMounts:
        - name: clair-config
          mountPath: /etc/clair/config.yaml
          subPath: config.yaml
      volumes:
      - name: clair-config
        configMap:
          name: "harbor-harbor-clair"
          items:
            - key: config.yaml
              path: config.yaml


---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-core
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
    spec:
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/ping
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: _REDIS_URL
            value: harbor-harbor-redis:6379,100,
          - name: _REDIS_URL_REG
            value: redis://harbor-harbor-redis:6379/2
          - name: LOG_LEVEL
            value: debug
          - name: CONFIG_PATH
            value: /etc/core/app.conf
          - name: SYNC_REGISTRY
            value: "false"
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: CHART_CACHE_DRIVER
            value: "redis"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tokenServicePrivateKey
        - name: ca-download
          mountPath: /etc/core/ca/ca.crt
          subPath: ca.crt
        - name: psc
          mountPath: /etc/core/token
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-core
      - name: secret-key
        secret:
          secretName: harbor-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: harbor-harbor-core
      - name: ca-download
        secret:
          secretName: harbor-harbor-nginx
          items:
            - key: ca.crt
              path: ca.crt
      - name: psc
        emptyDir: {}

---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-jobservice"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
    spec:
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          null
          
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
          - name: ADMINSERVER_URL
            value: "http://harbor-harbor-adminserver"
          - name: REGISTRY_CONTROLLER_URL
            value: "http://harbor-harbor-registry:8080"
          - name: LOG_LEVEL
            value: debug
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: jobservice
      volumes:
      - name: jobservice-config
        configMap:
          name: "harbor-harbor-jobservice"
      - name: job-logs
        emptyDir: {}

---
# Source: harbor/templates/nginx/deployment.yaml

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: harbor-harbor-nginx
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: nginx
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: nginx
    spec:
      containers:
      - name: nginx
        image: "goharbor/nginx-photon:dev"
        imagePullPolicy: "IfNotPresent"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        ports:
        - containerPort: 80
        - containerPort: 443
        - containerPort: 4443
        volumeMounts:
        - name: config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: certificate
          mountPath: /etc/nginx/cert
      volumes:
      - name: config
        configMap:
          name: harbor-harbor-nginx
      - name: certificate
        secret:
          secretName: harbor-harbor-nginx
---
# Source: harbor/templates/notary/notary-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-server
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-server
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-server
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-server
    spec:
      containers:
      - name: notary-server
        image: goharbor/notary-server-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/server/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notaryserver?sslmode=disable
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
        - name: root-certificate
          mountPath: /root.crt
          subPath: tokenServiceRootCertBundle
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"
      - name: root-certificate
        secret:
          secretName: harbor-harbor-core


---
# Source: harbor/templates/notary/notary-signer.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: harbor-harbor-notary-signer
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: notary-signer
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: notary-signer
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: notary-signer
    spec:
      containers:
      - name: notary-signer
        image: goharbor/notary-signer-photon:dev
        imagePullPolicy: IfNotPresent
        resources:
          null
          
        env:
        - name: MIGRATIONS_PATH
          value: migrations/signer/postgresql
        - name: DB_URL
          value: postgres://postgres:changeit@harbor-harbor-database:5432/notarysigner?sslmode=disable
        - name: NOTARY_SIGNER_DEFAULTALIAS
          value: defaultalias
        volumeMounts:
        - name: notary-config
          mountPath: /etc/notary
      volumes:
      - name: notary-config
        configMap:
          name: "harbor-harbor-notary-server"


---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-portal"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
    spec:
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 80

---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-harbor-registry"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
    spec:
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: registry
        - name: registry-root-certificate
          mountPath: /etc/registry/root.crt
          subPath: tokenServiceRootCertBundle
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "harbor-harbor-registry"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: harbor-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: "harbor-harbor-jobservice"
                key: secret
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: registry
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-root-certificate
        secret:
          secretName: harbor-harbor-core
      - name: registry-config
        configMap:
          name: "harbor-harbor-registry"
      - name: registry-data
        emptyDir: {}

---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "harbor-harbor-database"
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "harbor-harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: database
    spec:
      initContainers:
      - name: "remove-lost-found"
        image: goharbor/harbor-db:dev
        command: ["rm", "-Rf", "/var/lib/postgresql/data/lost+found"]
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        envFrom:
          - secretRef:
              name: "harbor-harbor-database"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: database
      volumes:
      - name: "database-data"
        emptyDir: {}
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: harbor-harbor-redis
  labels:
    heritage: Tiller
    release: harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: harbor-harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Tiller
        release: harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          null
          
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: redis
      volumes:
      - name: data
        emptyDir: {}
---
# Source: harbor/templates/chartmuseum/chartmuseum-cm.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-dpl.yaml


---
# Source: harbor/templates/chartmuseum/chartmuseum-pvc.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-secret.yaml

---
# Source: harbor/templates/chartmuseum/chartmuseum-svc.yaml

---
# Source: harbor/templates/ingress/ingress.yaml

---
# Source: harbor/templates/ingress/secret.yaml

---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml

---
# Source: harbor/templates/nginx/configmap-http.yaml

    
---
# Source: harbor/templates/registry/registry-pvc.yaml

